[
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "AddOrEditUserProfilePhoto",
    "RelativePath": "api/services/app/Account/AddOrEditUserProfilePhoto",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Authorization.Accounts.Dto.AddUserProfilePhotoDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "ChangePhoneNumber",
    "RelativePath": "api/services/app/Account/ChangePhoneNumber",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Authorization.Accounts.Dto.ChangePhoneNumberDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Authorization.Accounts.Dto.SignInWithPhoneNumberOutput",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "CheckIfUserIsActiveOrNot",
    "RelativePath": "api/services/app/Account/CheckIfUserIsActiveOrNot",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Cities.Dto.ActivationStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "DeleteAccount",
    "RelativePath": "api/services/app/Account/DeleteAccount",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "GetProfileInfo",
    "RelativePath": "api/services/app/Account/GetProfileInfo",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Authorization.Accounts.Dto.ProfileInfoDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "LogOut",
    "RelativePath": "api/services/app/Account/LogOut",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "Register",
    "RelativePath": "api/services/app/Account/Register",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Authorization.Accounts.Dto.RegisterInput",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Authorization.Accounts.Dto.RegisterOutput",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "ResendVerificationCodeAsync",
    "RelativePath": "api/services/app/Account/ResendVerificationCode",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Authorization.Accounts.Dto.VerifiyPhoneNumberInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "SendVerificationCodeToEmailAsync",
    "RelativePath": "api/services/app/Account/SendVerificationCodeToEmail",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Authorization.Accounts.Dto.RequestCodeToEmailInput",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Authorization.Accounts.Dto.SendCodeToEmailOutPut",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "SignInWithPhoneNumberAsync",
    "RelativePath": "api/services/app/Account/SignInWithPhoneNumber",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Authorization.Accounts.Dto.SignInWithPhoneNumberInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "SignUpWithPhoneNumberAsync",
    "RelativePath": "api/services/app/Account/SignUpWithPhoneNumber",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Authorization.Accounts.Dto.SignInWithPhoneNumberInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "UpdateProfile",
    "RelativePath": "api/services/app/Account/UpdateProfile",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Authorization.Accounts.Dto.UpdateProfileDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "VerifySignUpWithPhoneNumberAsync",
    "RelativePath": "api/services/app/Account/VerifySignUpWithPhoneNumber",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Authorization.Accounts.Dto.VerifySignUpWithPhoneNumberInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "Mofleet.Authorization.Accounts.AccountAppService",
    "Method": "VerifyUserEmailAccount",
    "RelativePath": "api/services/app/Account/VerifyUserEmailAccount",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Authorization.Accounts.Dto.ConfirmEmailWithCodeInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Advertisiments.AdvertisimentAppService",
    "Method": "AddAdvertisimentPositionToAdvertisiment",
    "RelativePath": "api/services/app/Advertisiment/AddAdvertisimentPositionToAdvertisiment",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Advertisiments.Dto.AddAdvertisimentPositionDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Advertisiments.AdvertisimentAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Advertisiment/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Advertisiments.Dto.CreateAdvertisimentDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Advertisiments.Dto.AdvertisimentDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CrudAppServiceBase.MofleetAsyncCrudAppService\u00607[[Mofleet.Domain.Advertisiments.Advertisiment, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Advertisiments.Dto.AdvertisimentDetailsDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Mofleet.Advertisiments.Dto.LiteAdvertisimentDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Advertisiments.Dto.PagedAdvertisimentResultRequestDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Advertisiments.Dto.CreateAdvertisimentDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Advertisiments.Dto.UpdateAdvertisimentDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Advertisiment/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Advertisiments.AdvertisimentAppService",
    "Method": "DeleteAdvertisimentPosition",
    "RelativePath": "api/services/app/Advertisiment/DeleteAdvertisimentPosition",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "AdvertisimentId",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "Position",
        "Type": "Mofleet.Enums.Enum\u002BPositionForAdvertisiment",
        "IsRequired": false
      },
      {
        "Name": "Screen",
        "Type": "Mofleet.Enums.Enum\u002BScreen",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Advertisiments.AdvertisimentAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Advertisiment/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Advertisiments.Dto.AdvertisimentDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Advertisiments.AdvertisimentAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Advertisiment/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "Screen",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BScreen, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "Position",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BPositionForAdvertisiment, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Advertisiments.Dto.LiteAdvertisimentDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Advertisiments.AdvertisimentAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/Advertisiment/SwitchActivation",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Abp.Application.Services.Dto.IEntityDto\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Advertisiments.Dto.AdvertisimentDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.ApkBuildAppService.ApkBuildAppService",
    "Method": "ChangeUpdateOptionsForApk",
    "RelativePath": "api/services/app/ApkBuild/ChangeUpdateOptionsForApk",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.ApkBuilds.Dtos.InputApkNuildStatuesDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Cities.Dto.OutPutBooleanStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.ApkBuildAppService.ApkBuildAppService",
    "Method": "CheckIfAppNeedToUpdate",
    "RelativePath": "api/services/app/ApkBuild/CheckIfAppNeedToUpdate",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.ApkBuilds.Dtos.InputApkBuildStatuesDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.ApkBuilds.Dtos.OutputApkBuildStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.ApkBuildAppService.ApkBuildAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/ApkBuild/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.ApkBuilds.Dtos.CreateApkBuildDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.ApkBuilds.Dtos.ApkBuildDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.ApkBuildAppService.ApkBuildAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/ApkBuild/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "AppType",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BAppType, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "SystemType",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BSystemType, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "UpdateOptions",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BUpdateOptions, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.ApkBuilds.Dtos.LiteApkBuildDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.ApkBuildAppService.ApkBuildAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/ApkBuild/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.ApkBuilds.Dtos.UpdateApkBuildDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.ApkBuilds.Dtos.ApkBuildDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Attachments.AttachmentAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Attachment/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Attachments.Dto.AttachmentDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Attachments.AttachmentAppService",
    "Method": "UploadAsync",
    "RelativePath": "api/services/app/Attachment/Upload",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "RefType",
        "Type": "System.Byte",
        "IsRequired": false
      },
      {
        "Name": "File",
        "Type": "Microsoft.AspNetCore.Http.IFormFile",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Attachments.Dto.AttachmentDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Attachments.AttachmentAppService",
    "Method": "UploadMultiAttachmentAsync",
    "RelativePath": "api/services/app/Attachment/UploadMultiAttachment",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "RefType",
        "Type": "System.Byte",
        "IsRequired": false
      },
      {
        "Name": "Files",
        "Type": "Microsoft.AspNetCore.Http.IFormFileCollection",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[Mofleet.Attachments.Dto.AttachmentDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributeChoices.AttributeChoiceAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/AttributeChoice/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.AttributeChoices.Dto.CreateAttributeChoiceDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.AttributeChoices.Dto.AttributeChoiceDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributeChoices.AttributeChoiceAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/AttributeChoice/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributeChoices.AttributeChoiceAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/AttributeChoice/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.AttributeChoices.Dto.AttributeChoiceDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributeChoices.AttributeChoiceAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/AttributeChoice/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "AttributeId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "IsParent",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "ParentId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.AttributeChoices.Dto.LiteAttributeChoiceDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributeChoices.AttributeChoiceAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/AttributeChoice/SwitchActivation",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.AttributeChoices.Dto.AttributeChoiceSwitchActivationDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.AttributeChoices.Dto.AttributeChoiceDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributeChoices.AttributeChoiceAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/AttributeChoice/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.AttributeChoices.Dto.UpdateAttributeChoiceDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.AttributeChoices.Dto.AttributeChoiceDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.AttributeForSourceTypeAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/AttributeForSourceType/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.AttributesForSourceType.Dto.CreateAttributeForSourceTypeDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.AttributesForSourceType.Dto.AttributeForSourceTypeDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.AttributeForSourceTypeAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/AttributeForSourceType/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.AttributeForSourceTypeAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/AttributeForSourceType/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.AttributesForSourceType.Dto.AttributeForSourceTypeDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.AttributeForSourceTypeAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/AttributeForSourceType/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "KeyWord",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "SourceTypeId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.AttributesForSourceType.Dto.LiteAttributeForSourceTypeDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.AttributeForSourceTypeAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/AttributeForSourceType/SwitchActivation",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Cities.Dto.SwitchActivationInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.AttributesForSourceType.Dto.AttributeForSourceTypeDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.AttributeForSourceTypeAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/AttributeForSourceType/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.AttributesForSourceType.Dto.UpdateAttributeForSourceTypeDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.AttributesForSourceType.Dto.AttributeForSourceTypeDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CityAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/City/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Cities.Dto.CreateCityDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Cities.Dto.CityDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CityAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/City/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CityAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/City/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Cities.Dto.CityDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CityAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/City/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "CountryId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Cities.Dto.LiteCityDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CityAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/City/SwitchActivation",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Cities.Dto.SwitchActivationInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Cities.Dto.CityDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CityAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/City/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Cities.Dto.UpdateCityDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Cities.Dto.CityDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CommissionGroups.CommissionGroupAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/CommissionGroup/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.CommissionGroups.Dtos.CreateCommissionGroupDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.CommissionGroups.Dtos.CommissionGroupDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CommissionGroups.CommissionGroupAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/CommissionGroup/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.CommissionGroups.Dtos.LiteCommissionGroupDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CommissionGroups.CommissionGroupAppService",
    "Method": "GetCommissionForCompanyOrCompanyBranch",
    "RelativePath": "api/services/app/CommissionGroup/GetCommissionForCompanyOrCompanyBranch",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "Provider",
        "Type": "Mofleet.Enums.Enum\u002BProvider",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.CommissionGroups.Dtos.CommissionGroupDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CommissionGroups.CommissionGroupAppService",
    "Method": "SwipeCompanyFromGroupToAnother",
    "RelativePath": "api/services/app/CommissionGroup/SwipeCompanyFromGroupToAnother",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.CommissionGroups.Dtos.SwipedInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CommissionGroups.CommissionGroupAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/CommissionGroup/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.CommissionGroups.Dtos.UpdateCommissionGroupDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.CommissionGroups.Dtos.CommissionGroupDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "AddOrUpdateTimeWorkForCompany",
    "RelativePath": "api/services/app/Company/AddOrUpdateTimeWorkForCompany",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.TimeWorks.Dtos.CreateTiemOfWorkDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Cities.Dto.OutPutBooleanStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "ApproveUpdateCompany",
    "RelativePath": "api/services/app/Company/ApproveUpdateCompany",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Companies.Dto.CompanyDetailsDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Companies.Dto.CompanyDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "ChangeAcceptRequestOrPossibleRequestForCompanyAsync",
    "RelativePath": "api/services/app/Company/ChangeAcceptRequestOrPossibleRequestForCompany",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Companies.Dto.AcceptRequestOrPossibleDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "CheckIfCompanyOrBranchCanBeFeature",
    "RelativePath": "api/services/app/Company/CheckIfCompanyOrBranchCanBeFeature",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.RequestForQuotations.Dto.TinySelectedCompanyDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Companies.Dto.BooleanOutputDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "ConfirmCompanyByAdmin",
    "RelativePath": "api/services/app/Company/ConfirmCompanyByAdmin",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Companies.Dto.CompanyStatuesDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Company/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Companies.Dto.CreateCompanyDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Companies.Dto.CompanyDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Company/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Company/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Companies.Dto.CompanyDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Company/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsForFilter",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "RequestId",
        "Type": "System.Int64",
        "IsRequired": false
      },
      {
        "Name": "GetCompaniesWithRequest",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "WhichBoughtInfoContact",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "ServiceType",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BServiceType, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "statues",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BCompanyStatues, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "CompanyIds",
        "Type": "System.Collections.Generic.List\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "AcceptRequests",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "AcceptPossibleRequests",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "IsFeature",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "GetCompaniesThatNeedToUpdate",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.Companies.Dto.LiteCompanyDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "GetCompaniesToCompare",
    "RelativePath": "api/services/app/Company/GetCompaniesToCompare",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "newCompanyId",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Companies.Dto.CompareCompaniesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "GetCompanyFeatureStatues",
    "RelativePath": "api/services/app/Company/GetCompanyFeatureStatues",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "companyId",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Companies.Dto.FeatureStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "GetCompanyPoints",
    "RelativePath": "api/services/app/Company/GetCompanyPoints",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "companyId",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Companies.Dto.PointStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "GetCompanyStatuesAsync",
    "RelativePath": "api/services/app/Company/GetCompanyStatues",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "companyId",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Companies.Dto.CompanyStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "GetInfoAboutRequestsCount",
    "RelativePath": "api/services/app/Company/GetInfoAboutRequestsCount",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[Mofleet.Domain.Companies.Dto.RequestsForCompanyCountDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "GetReviewDetailsById",
    "RelativePath": "api/services/app/Company/GetReviewDetailsById",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.IList\u00601[[Mofleet.Domain.Reviews.Dto.ReviewDetailsDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "IncludeBranchToMainCompany",
    "RelativePath": "api/services/app/Company/IncludeBranchToMainCompany",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Companies.Dto.SureIncludeBranchDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Cities.Dto.OutPutBooleanStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "RequestToIncludeBranchToMainCompany",
    "RelativePath": "api/services/app/Company/RequestToIncludeBranchToMainCompany",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Companies.Dto.RequestIncludeBranchDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Companies.Dto.RequestIncludeBranchDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Cities.CompanyAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/Company/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Companies.Dto.UpdateCompanyDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Companies.Dto.CompanyDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CompanyBranches.CompanyBranchAppService",
    "Method": "AddOrUpdateTimeWorkForCompanyBranch",
    "RelativePath": "api/services/app/CompanyBranch/AddOrUpdateTimeWorkForCompanyBranch",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.TimeWorks.Dtos.CreateTiemOfWorkDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Cities.Dto.OutPutBooleanStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CompanyBranches.CompanyBranchAppService",
    "Method": "ChangeAcceptRequestOrPossibleRequestForCompanyBranchAsync",
    "RelativePath": "api/services/app/CompanyBranch/ChangeAcceptRequestOrPossibleRequestForCompanyBranch",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Companies.Dto.AcceptRequestOrPossibleDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CompanyBranches.CompanyBranchAppService",
    "Method": "ConfirmCompanyBranchByAdmin",
    "RelativePath": "api/services/app/CompanyBranch/ConfirmCompanyBranchByAdmin",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Companies.Dto.CompanyBranchStatuesDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Cities.Dto.OutPutBooleanStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CompanyBranches.CompanyBranchAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/CompanyBranch/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.CompanyBranches.Dto.CreateCompanyBranchDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.CompanyBranches.Dto.CompanyBranchDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CompanyBranches.CompanyBranchAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/CompanyBranch/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CompanyBranches.CompanyBranchAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/CompanyBranch/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.CompanyBranches.Dto.CompanyBranchDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CompanyBranches.CompanyBranchAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/CompanyBranch/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "CompanyId",
        "Type": "System.Nullable\u00601[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "IsForFilter",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "RequestId",
        "Type": "System.Int64",
        "IsRequired": false
      },
      {
        "Name": "GetCompnyBranchesWithRequest",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "WhichBoughtInfoContact",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "ServiceType",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BServiceType, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranchIds",
        "Type": "System.Collections.Generic.List\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "Statues",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BCompanyStatues, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "BranchStatues",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BCompanyBranchStatues, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "IsFeature",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "GetBranchesWithoutCompany",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "AcceptRequests",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "AcceptPossibleRequests",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.CompanyBranches.Dto.LiteCompanyBranchDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CompanyBranches.CompanyBranchAppService",
    "Method": "GetCompanyBranchFeatureStatues",
    "RelativePath": "api/services/app/CompanyBranch/GetCompanyBranchFeatureStatues",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "companyBranchId",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Companies.Dto.FeatureStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CompanyBranches.CompanyBranchAppService",
    "Method": "GetCompanyBranchPoints",
    "RelativePath": "api/services/app/CompanyBranch/GetCompanyBranchPoints",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "companyBranchId",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Companies.Dto.PointStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CompanyBranches.CompanyBranchAppService",
    "Method": "GetCompanyBranchStatuesAsync",
    "RelativePath": "api/services/app/CompanyBranch/GetCompanyBranchStatues",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "companyBrnchId",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Companies.Dto.CompanyStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CompanyBranches.CompanyBranchAppService",
    "Method": "GetInfoAboutRequestsCount",
    "RelativePath": "api/services/app/CompanyBranch/GetInfoAboutRequestsCount",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[Mofleet.Domain.CompanyBranches.Dto.RequestsForCompanyBranchCountDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CompanyBranches.CompanyBranchAppService",
    "Method": "GetReviewDetailsById",
    "RelativePath": "api/services/app/CompanyBranch/GetReviewDetailsById",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.IList\u00601[[Mofleet.Domain.Reviews.Dto.ReviewDetailsDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CompanyBranches.CompanyBranchAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/CompanyBranch/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.CompanyBranches.Dto.UpdateCompanyBranchDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.CompanyBranches.Dto.CompanyBranchDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "ChangeUiTheme",
    "RelativePath": "api/services/app/Configuration/ChangeUiTheme",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Configuration.Dto.ChangeUiThemeInput",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "GetAllEnums",
    "RelativePath": "api/services/app/Configuration/GetAllEnums",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[Mofleet.EnumInfo, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "GetCommissionForBranchesWithoutCompany",
    "RelativePath": "api/services/app/Configuration/GetCommissionForBranchesWithoutCompany",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Configuration.Dto.CommissionGroupInputDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "GetDiscountPercentage",
    "RelativePath": "api/services/app/Configuration/GetDiscountPercentage",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Configuration.Dto.DiscountPercentageDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "GetEmailSetting",
    "RelativePath": "api/services/app/Configuration/GetEmailSetting",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Configuration.Dto.EmailSettingDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "GetFileSizeSetting",
    "RelativePath": "api/services/app/Configuration/GetFileSizeSetting",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Configuration.Dto.FileSizeSettingDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "GetHoursInSystem",
    "RelativePath": "api/services/app/Configuration/GetHoursInSystem",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Configuration.Dto.HoursDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "GetSmsSetting",
    "RelativePath": "api/services/app/Configuration/GetSmsSetting",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Configuration.Dto.SmsSettingDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "SetCommissionForBranchesWithoutCompany",
    "RelativePath": "api/services/app/Configuration/SetCommissionForBranchesWithoutCompany",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Configuration.Dto.CommissionGroupInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "SetDiscountPercentage",
    "RelativePath": "api/services/app/Configuration/SetDiscountPercentage",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Configuration.Dto.DiscountPercentageDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "SetEmailSetting",
    "RelativePath": "api/services/app/Configuration/SetEmailSetting",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Configuration.Dto.EmailSettingDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "SetFileSizeSetting",
    "RelativePath": "api/services/app/Configuration/SetFileSizeSetting",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Configuration.Dto.FileSizeSettingDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "SetHoursInSystem",
    "RelativePath": "api/services/app/Configuration/SetHoursInSystem",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Configuration.Dto.HoursDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Configuration.ConfigurationAppService",
    "Method": "SetSmsSetting",
    "RelativePath": "api/services/app/Configuration/SetSmsSetting",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Configuration.Dto.SmsSettingDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.ContactUsService.ContactUsAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/ContactUs/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.ContactUsService.Dto.CreateContactUsDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.ContactUsService.Dto.ContactUsDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.ContactUsService.ContactUsAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/ContactUs/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.ContactUsService.Dto.ContactUsDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.ContactUsService.ContactUsAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/ContactUs/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.ContactUsService.Dto.UpdateContactUsDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.ContactUsService.Dto.ContactUsDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Countries.CountryAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Country/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Countries.Dto.CreateCountryDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Countries.Dto.CountryDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Countries.CountryAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Country/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Countries.CountryAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Country/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Countries.Dto.CountryDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Countries.CountryAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Country/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "Type",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BServiceType, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Countries.Dto.CountryDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Countries.CountryAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/Country/SwitchActivation",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Cities.Dto.SwitchActivationInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Countries.Dto.CountryDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Countries.CountryAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/Country/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Countries.Dto.UpdateCountryDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Countries.Dto.CountryDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Drafts.DraftAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Draft/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Drafts.Dtos.CreateDraftDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Drafts.Dtos.DraftDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Drafts.DraftAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Draft/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Drafts.DraftAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Draft/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Drafts.Dtos.DraftDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Drafts.DraftAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Draft/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "UserId",
        "Type": "System.Nullable\u00601[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.Drafts.Dtos.LiteDraftDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Drafts.DraftAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/Draft/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Drafts.Dtos.UpdateDraftDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Drafts.Dtos.DraftDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.FrequentlyQuestionService.FrequentlyQuestionAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/FrequentlyQuestion/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.FrequentlyQuestions.Dto.CreateFrequentlyQuestionDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.FrequentlyQuestions.Dto.FrequentlyQuestionDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.FrequentlyQuestionService.FrequentlyQuestionAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/FrequentlyQuestion/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.FrequentlyQuestionService.FrequentlyQuestionAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/FrequentlyQuestion/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.FrequentlyQuestions.Dto.FrequentlyQuestionDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.FrequentlyQuestionService.FrequentlyQuestionAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/FrequentlyQuestion/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "App",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BAppType, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.FrequentlyQuestions.Dto.LiteFrequentlyQuestionDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.FrequentlyQuestionService.FrequentlyQuestionAppService",
    "Method": "MigrateDatabaseAsync",
    "RelativePath": "api/services/app/FrequentlyQuestion/MigrateDatabase",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": []
  },
  {
    "ContainingType": "Mofleet.FrequentlyQuestionService.FrequentlyQuestionAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/FrequentlyQuestion/SwitchActivation",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Cities.Dto.SwitchActivationInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.FrequentlyQuestions.Dto.FrequentlyQuestionDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.FrequentlyQuestionService.FrequentlyQuestionAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/FrequentlyQuestion/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.FrequentlyQuestions.Dto.UpdateFrequentlyQuestionDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.FrequentlyQuestions.Dto.FrequentlyQuestionDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Mediators.MediatorAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Mediator/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Mediators.Dto.CreateMediatorDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Mediators.Dto.MediatorDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Mediators.MediatorAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Mediator/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Mediators.MediatorAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Mediator/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Mediators.Dto.MediatorDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Mediators.MediatorAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Mediator/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Mediators.Dto.MediatorDetailsDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Mediators.MediatorAppService",
    "Method": "GetInfoRegisteredUsersViaBroker",
    "RelativePath": "api/services/app/Mediator/GetInfoRegisteredUsersViaBroker",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "mediatorId",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Mediator.Dto.InfoRegisteredUsersViaBrokerDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Mediators.MediatorAppService",
    "Method": "StatisticsRegisteredUsersViaBrokers",
    "RelativePath": "api/services/app/Mediator/StatisticsRegisteredUsersViaBrokers",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[Mofleet.Domain.Mediator.Dto.StatisticsRegisteredUsersViaBrokers, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Mediators.MediatorAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/Mediator/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Mediators.Dto.UpdateMediatorDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Mediators.Dto.MediatorDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Abp.Application.Services.AsyncCrudAppService\u00608[[Mofleet.Domain.MoneyTransfers.MoneyTransfer, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Domain.MoneyTransfers.Dtos.MoneyTransferDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Mofleet.Domain.MoneyTransfers.Dtos.PagedMoneyTransferResultRequestDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Domain.MoneyTransfers.Dtos.CreateMoneyTransferDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Domain.MoneyTransfers.Dtos.UpdateMoneyTransferDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Domain.MoneyTransfers.Dtos.MoneyTransferDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Abp.Application.Services.Dto.EntityDto\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Abp, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/MoneyTransfer/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "User.UserName",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "User.Name",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "User.Surname",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "User.EmailAddress",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "User.IsActive",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "User.FullName",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "User.CreationTime",
        "Type": "System.DateTime",
        "IsRequired": false
      },
      {
        "Name": "User.Type",
        "Type": "Mofleet.Enums.Enum\u002BUserType",
        "IsRequired": false
      },
      {
        "Name": "User.PhoneNumber",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "User.PIN",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "User.RegistrationFullName",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "User.Id",
        "Type": "System.Int64",
        "IsRequired": false
      },
      {
        "Name": "Company.Bio",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "Company.Name",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "Company.Address",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "Company.Translations",
        "Type": "System.Collections.Generic.List\u00601[[Mofleet.Domain.Companies.Dto.CompanyTranslationDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "Company.CompanyContact.DialCode",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "Company.CompanyContact.PhoneNumber",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "Company.CompanyContact.EmailAddress",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "Company.CompanyContact.WebSite",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "Company.CompanyContact.IsForBranchCompany",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "Company.GeneralRating.Quality",
        "Type": "System.Double",
        "IsRequired": false
      },
      {
        "Name": "Company.GeneralRating.CustomerService",
        "Type": "System.Double",
        "IsRequired": false
      },
      {
        "Name": "Company.GeneralRating.ValueOfServiceForMoney",
        "Type": "System.Double",
        "IsRequired": false
      },
      {
        "Name": "Company.GeneralRating.OverallRating",
        "Type": "System.Double",
        "IsRequired": false
      },
      {
        "Name": "Company.Reviews",
        "Type": "System.Collections.Generic.List\u00601[[Mofleet.Domain.Reviews.Dto.ReviewDetailsDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "Company.NumberOfTransfers",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "Company.CommissionGroup",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "Company.Id",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.Bio",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.Name",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.Address",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.Translations",
        "Type": "System.Collections.Generic.List\u00601[[Mofleet.Domain.CompanyBranches.Dto.CompanyBranchTranslationDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.CompanyContact.DialCode",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.CompanyContact.PhoneNumber",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.CompanyContact.EmailAddress",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.CompanyContact.WebSite",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.CompanyContact.IsForBranchCompany",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.GeneralRating.Quality",
        "Type": "System.Double",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.GeneralRating.CustomerService",
        "Type": "System.Double",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.GeneralRating.ValueOfServiceForMoney",
        "Type": "System.Double",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.GeneralRating.OverallRating",
        "Type": "System.Double",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.Reviews",
        "Type": "System.Collections.Generic.List\u00601[[Mofleet.Domain.Reviews.Dto.ReviewDetailsDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.NumberOfTransfers",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.ServiceType",
        "Type": "Mofleet.Enums.Enum\u002BServiceType",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranch.Id",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "Amount",
        "Type": "System.Double",
        "IsRequired": false
      },
      {
        "Name": "ReasonOfPaid",
        "Type": "Mofleet.Enums.Enum\u002BReasonOfPaid",
        "IsRequired": false
      },
      {
        "Name": "PaidStatues",
        "Type": "Mofleet.Enums.Enum\u002BPaidStatues",
        "IsRequired": false
      },
      {
        "Name": "PaidProvider",
        "Type": "Mofleet.Enums.Enum\u002BPaidProvider",
        "IsRequired": false
      },
      {
        "Name": "PaidDestination",
        "Type": "Mofleet.Enums.Enum\u002BPaidDestination",
        "IsRequired": false
      },
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.MoneyTransfers.Dtos.MoneyTransferDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.MoneyTransfers.MoneyTransferAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/MoneyTransfer/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "ReasonOfPaid",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BReasonOfPaid, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "PaidStatues",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BPaidStatues, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "PaidProvider",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BPaidProvider, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.MoneyTransfers.Dtos.MoneyTransferDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Notifications.NotificationAppService",
    "Method": "GetNumberOfUnReadUserNotificationsAsync",
    "RelativePath": "api/services/app/Notification/GetNumberOfUnReadUserNotifications",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Int32",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Notifications.NotificationAppService",
    "Method": "GetUserNotificationsAsync",
    "RelativePath": "api/services/app/Notification/GetUserNotifications",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "State",
        "Type": "System.Nullable\u00601[[Abp.Notifications.UserNotificationState, Abp, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "Type",
        "Type": "System.Nullable\u00601[[Mofleet.NotificationService.NotificationType, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "Sorting",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Notifications.Dto.NotificationDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Notifications.NotificationAppService",
    "Method": "MarkNotificationAsReadAsync",
    "RelativePath": "api/services/app/Notification/MarkNotificationAsRead",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Abp.Application.Services.Dto.EntityDto\u00601[[System.Guid, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Notifications.NotificationAppService",
    "Method": "SynchronizeAuthIdWithLocalId",
    "RelativePath": "api/services/app/Notification/SynchronizeAuthIdWithLocalId",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.Int64",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Int64",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Notifications.NotificationAppService",
    "Method": "TestNotifyUsersAsync",
    "RelativePath": "api/services/app/Notification/TestNotifyUsers",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Notifications.Dto.TestNotificationInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Offers.OfferAppService",
    "Method": "ApproveOfferToSendItToUser",
    "RelativePath": "api/services/app/Offer/ApproveOfferToSendItToUser",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "offerIds",
        "Type": "System.Collections.Generic.List\u00601[[System.Guid, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Offers.OfferAppService",
    "Method": "CalucateCostOfStorage",
    "RelativePath": "api/services/app/Offer/CalucateCostOfStorage",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Offers.Dto.CalucateStorageInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Offers.Dto.AmountOutPutDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Offers.OfferAppService",
    "Method": "CheckIfUserRateThisOfferOrNot",
    "RelativePath": "api/services/app/Offer/CheckIfUserRateThisOfferOrNot",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "offerId",
        "Type": "System.Guid",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Cities.Dto.OutPutBooleanStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Offers.OfferAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Offer/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Offers.Dto.CreateOfferDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Offers.Dto.OfferDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CrudAppServiceBase.MofleetAsyncCrudAppService\u00607[[Mofleet.Domain.Offers.Offer, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Domain.Offers.Dto.OfferDetailsDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Guid, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Mofleet.Domain.Offers.Dto.LiteOfferDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Domain.Offers.Dto.PagedOfferResultRequestDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Domain.Offers.Dto.CreateOfferDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Domain.Offers.Dto.UpdateOfferDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Offer/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Guid",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Offers.OfferAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Offer/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Guid",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Offers.Dto.OfferDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Offers.OfferAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Offer/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "Statues",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BOfferStatues, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "CompanyId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranchId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "MyOffers",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "RequestId",
        "Type": "System.Nullable\u00601[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.Offers.Dto.LiteOfferDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Offers.OfferAppService",
    "Method": "RateCompanyOrCompanyBranch",
    "RelativePath": "api/services/app/Offer/RateCompanyOrCompanyBranch",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Reviews.Dto.CreateReviewDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Reviews.Dto.ReviewDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Offers.OfferAppService",
    "Method": "RejectOffersByUser",
    "RelativePath": "api/services/app/Offer/RejectOffersByUser",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Offers.Dto.RejectOffersInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Offers.OfferAppService",
    "Method": "RejectOfferToEditItByAdmin",
    "RelativePath": "api/services/app/Offer/RejectOfferToEditItByAdmin",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Offers.Dto.RejectOfferToEditItInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Cities.Dto.OutPutBooleanStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Offers.OfferAppService",
    "Method": "TakeOfferFromUserAsync",
    "RelativePath": "api/services/app/Offer/TakeOfferFromUser",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "offerId",
        "Type": "System.Guid",
        "IsRequired": false
      },
      {
        "Name": "paymentMethodId",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "rSMcode",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Offers.OfferAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/Offer/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Offers.Dto.UpdateOfferDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Offers.Dto.OfferDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Partners.PartnerAppService",
    "Method": "AddNewCodeToPatner",
    "RelativePath": "api/services/app/Partner/AddNewCodeToPatner",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Partners.Dto.CreateCodeInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Partners.PartnerAppService",
    "Method": "AddNumberToCode",
    "RelativePath": "api/services/app/Partner/AddNumberToCode",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Codes.Dto.AddNumberOfCode",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Partners.PartnerAppService",
    "Method": "CheckIfCodeExictWithThisUserAsync",
    "RelativePath": "api/services/app/Partner/CheckIfCodeExictWithThisUser",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "price",
        "Type": "System.Double",
        "IsRequired": false
      },
      {
        "Name": "code",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Cities.Dto.OutPutBooleanStatuesWithPriceDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Partners.PartnerAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Partner/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Partners.Dto.CreatePartnerDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Partners.Dto.PartnerDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Partners.PartnerAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Partner/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Partners.PartnerAppService",
    "Method": "DeleteCodeFromPatner",
    "RelativePath": "api/services/app/Partner/DeleteCodeFromPatner",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Partners.PartnerAppService",
    "Method": "DeleteNumberFromCode",
    "RelativePath": "api/services/app/Partner/DeleteNumberFromCode",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Codes.Dto.DeleteNumberOfCode",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Partners.PartnerAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Partner/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Partners.Dto.PartnerDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Partners.PartnerAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Partner/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.Partners.Dto.LitePartnerDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Partners.PartnerAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/Partner/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Partners.Dto.UpdatePartnerDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Partners.Dto.PartnerDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Points.PointAppService",
    "Method": "BuyBundles",
    "RelativePath": "api/services/app/Point/BuyBundles",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Points.Dto.BuyPointsInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Points.PointAppService",
    "Method": "BuyFeatureBundles",
    "RelativePath": "api/services/app/Point/BuyFeatureBundles",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Points.Dto.BuyPointsInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Points.PointAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Point/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Points.Dto.CreatePointDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Points.Dto.PointDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Points.PointAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Point/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Points.PointAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Point/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Points.Dto.PointDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Points.PointAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Point/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "IsForFeature",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Points.Dto.LitePointDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Points.PointAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/Point/SwitchActivation",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Cities.Dto.SwitchActivationInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Points.Dto.PointDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Points.PointAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/Point/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Points.Dto.UpdatePointDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Points.Dto.PointDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.PrivacyPolicyService.PrivacyPolicyAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/PrivacyPolicy/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.PrivacyPolicyService.Dto.CreatePrivacyPolicyDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.PrivacyPolicyService.Dto.PrivacyPolicyDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.PrivacyPolicyService.PrivacyPolicyAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/PrivacyPolicy/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.PrivacyPolicyService.PrivacyPolicyAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/PrivacyPolicy/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.PrivacyPolicyService.Dto.PrivacyPolicyDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.PrivacyPolicyService.PrivacyPolicyAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/PrivacyPolicy/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "IsForMoney",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "App",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BAppType, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.PrivacyPolicyService.Dto.LitePrivacyPolicyDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.PrivacyPolicyService.PrivacyPolicyAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/PrivacyPolicy/SwitchActivation",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Cities.Dto.SwitchActivationInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.PrivacyPolicyService.Dto.PrivacyPolicyDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.PrivacyPolicyService.PrivacyPolicyAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/PrivacyPolicy/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.PrivacyPolicyService.Dto.UpdatePrivacyPolicyDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.PrivacyPolicyService.Dto.PrivacyPolicyDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.PushNotifications.PushNotificationAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/PushNotification/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.PushNotifications.Dto.CreatePushNotificationDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.PushNotifications.Dto.PushNotificationDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CrudAppServiceBase.MofleetAsyncCrudAppService\u00607[[Mofleet.Domain.PushNotifications.PushNotification, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.PushNotifications.Dto.PushNotificationDetailsDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Mofleet.PushNotifications.Dto.LitePushNotificationDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.PushNotifications.Dto.PagedPushNotificationResultRequestDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.PushNotifications.Dto.CreatePushNotificationDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.PushNotifications.Dto.UpdatePushNotificationDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/PushNotification/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CrudAppServiceBase.MofleetAsyncCrudAppService\u00607[[Mofleet.Domain.PushNotifications.PushNotification, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.PushNotifications.Dto.PushNotificationDetailsDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Mofleet.PushNotifications.Dto.LitePushNotificationDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.PushNotifications.Dto.PagedPushNotificationResultRequestDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.PushNotifications.Dto.CreatePushNotificationDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.PushNotifications.Dto.UpdatePushNotificationDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/PushNotification/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.PushNotifications.Dto.PushNotificationDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.PushNotifications.PushNotificationAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/PushNotification/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "Destination",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BTopicType, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.PushNotifications.Dto.LitePushNotificationDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.PushNotifications.PushNotificationAppService",
    "Method": "ResendPushNotification",
    "RelativePath": "api/services/app/PushNotification/ResendPushNotification",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "pushNotificationId",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Regions.RegionAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Region/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Regions.Dto.CreateRegionDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Regions.Dto.RegionDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Regions.RegionAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Region/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Regions.RegionAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Region/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Regions.Dto.RegionDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Regions.RegionAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Region/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "CityId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.Regions.Dto.LiteRegionDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Regions.RegionAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/Region/SwitchActivation",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Cities.Dto.SwitchActivationInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Regions.Dto.RegionDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "ClinicSystem.Regions.RegionAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/Region/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Regions.Dto.UpdateRegionDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Regions.Dto.RegionDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RejectReasons.RejectReasonAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/RejectReason/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.RejectReasons.Dto.CreateRejectReasonDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.RejectReasons.Dto.RejectReasonDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RejectReasons.RejectReasonAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/RejectReason/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RejectReasons.RejectReasonAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/RejectReason/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.RejectReasons.Dto.RejectReasonDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RejectReasons.RejectReasonAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/RejectReason/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "PossibilityPotentialClient",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BPossibilityPotentialClient, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.RejectReasons.Dto.LiteRejectReasonDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RejectReasons.RejectReasonAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/RejectReason/SwitchActivation",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Cities.Dto.SwitchActivationInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.RejectReasons.Dto.RejectReasonDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RejectReasons.RejectReasonAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/RejectReason/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.RejectReasons.Dto.UpdateRejectReasonDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.RejectReasons.Dto.RejectReasonDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "CancelRequestByUserAsync",
    "RelativePath": "api/services/app/RequestForQuotation/CancelRequestByUser",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "requestId",
        "Type": "System.Int64",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Cities.Dto.OutPutBooleanStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "ChangeStatuesForRequest",
    "RelativePath": "api/services/app/RequestForQuotation/ChangeStatuesForRequest",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.RequestForQuotations.Dto.SwitchStatuesForRequestDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "ConfirmFinishOrNotFinishRequestForQuotationByUser",
    "RelativePath": "api/services/app/RequestForQuotation/ConfirmFinishOrNotFinishRequestForQuotationByUser",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.RequestForQuotations.Dto.FinishRequestByUserDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "ConfirmFinishRequestForQuotationByCompany",
    "RelativePath": "api/services/app/RequestForQuotation/ConfirmFinishRequestForQuotationByCompany",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.RequestForQuotations.Dto.FinishRequestByCompanyDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/RequestForQuotation/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.RequestForQuotations.Dto.CreateRequestForQuotationDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.RequestForQuotations.Dto.RequestForQuotationDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.CrudAppServiceBase.MofleetAsyncCrudAppService\u00607[[Mofleet.Domain.RequestForQuotations.RequestForQuotation, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Domain.RequestForQuotations.Dto.RequestForQuotationDetailsDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Mofleet.Domain.RequestForQuotations.Dto.LiteRequestForQuotationDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Domain.RequestForQuotations.Dto.PagedRequestForQuotationResultRequestDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Domain.RequestForQuotations.Dto.CreateRequestForQuotationDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Domain.RequestForQuotations.Dto.UpdateRequestForQuotationDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/RequestForQuotation/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int64",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "DeleteSearchedPlaceByPlaceId",
    "RelativePath": "api/services/app/RequestForQuotation/DeleteSearchedPlaceByPlaceId",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "placeId",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/RequestForQuotation/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int64",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.RequestForQuotations.Dto.RequestForQuotationDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/RequestForQuotation/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "CompanyId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "CompanyBranchId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "OnlyMyRequests",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "Statues",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BRequestForQuotationStatues, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "ServiceType",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BServiceType, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "SourceTypeId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "CreationTime",
        "Type": "System.Nullable\u00601[[System.DateTime, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "GetPossibleRequest",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "ForBroker",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "BrokerId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "GetPaidRequestForThisCompanyOrBranch",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "AcceptPossibleRequest",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "UserId",
        "Type": "System.Nullable\u00601[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "GetRequestsThatHasStorage",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.RequestForQuotations.Dto.LiteRequestForQuotationDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "GetAllSearchedPlacesByUserAsync",
    "RelativePath": "api/services/app/RequestForQuotation/GetAllSearchedPlacesByUser",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[Mofleet.Domain.SearchedPlacesByUsers.Dtos.SearchedPlacesByUserDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "GetCitiesStatistics",
    "RelativePath": "api/services/app/RequestForQuotation/GetCitiesStatistics",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "ForDestination",
        "Type": "System.Boolean",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[Mofleet.Domain.RequestForQuotations.Dto.CitiesStatisticsForRequestsDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "GetRequestContactAsync",
    "RelativePath": "api/services/app/RequestForQuotation/GetRequestContact",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "RequestId",
        "Type": "System.Int64",
        "IsRequired": false
      },
      {
        "Name": "Provider",
        "Type": "Mofleet.Enums.Enum\u002BProvider",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "GetServiceStatistics",
    "RelativePath": "api/services/app/RequestForQuotation/GetServiceStatistics",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[Mofleet.Domain.RequestForQuotations.Dto.ServiceStatisticsForRequestsDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "GetStatisticalNumbers",
    "RelativePath": "api/services/app/RequestForQuotation/GetStatisticalNumbers",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "DateFrom",
        "Type": "System.Nullable\u00601[[System.DateTime, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "DateTo",
        "Type": "System.Nullable\u00601[[System.DateTime, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.RequestForQuotations.Dto.RequestsStatisticalNumbersDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "InserNewPlaceForUser",
    "RelativePath": "api/services/app/RequestForQuotation/InserNewPlaceForUser",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.SearchedPlacesByUsers.Dtos.SearchedPlacesByUserDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "InsertAndNoticFilteredCompanies",
    "RelativePath": "api/services/app/RequestForQuotation/InsertAndNoticFilteredCompanies",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.ServiceValues.Dto.CompanyAndCompanyBranchIdsDto",
        "IsRequired": true
      },
      {
        "Name": "requestId",
        "Type": "System.Int64",
        "IsRequired": false
      },
      {
        "Name": "forPossibleRequest",
        "Type": "System.Boolean",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "PayForStorage",
    "RelativePath": "api/services/app/RequestForQuotation/PayForStorage",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.RequestForQuotations.Dto.ChangeDateForRequestDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Cities.Dto.OutPutBooleanStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/RequestForQuotation/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.RequestForQuotations.Dto.UpdateRequestForQuotationDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.RequestForQuotations.Dto.RequestForQuotationDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Roles.RoleAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Role/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Roles.Dto.CreateRoleDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Roles.Dto.RoleDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Roles.RoleAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Role/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Abp.Application.Services.AsyncCrudAppService\u00608[[Mofleet.Authorization.Roles.Role, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Roles.Dto.RoleDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Mofleet.Roles.Dto.PagedRoleResultRequestDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Roles.Dto.CreateRoleDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Roles.Dto.RoleDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Abp.Application.Services.Dto.EntityDto\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Abp, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null],[Abp.Application.Services.Dto.EntityDto\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Abp, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Role/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Roles.Dto.RoleDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Roles.RoleAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Role/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Roles.Dto.RoleDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Roles.RoleAppService",
    "Method": "GetAllPermissions",
    "RelativePath": "api/services/app/Role/GetAllPermissions",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.ListResultDto\u00601[[Mofleet.Roles.Dto.PermissionDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Roles.RoleAppService",
    "Method": "GetRoleForEdit",
    "RelativePath": "api/services/app/Role/GetRoleForEdit",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Roles.Dto.GetRoleForEditOutput",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Roles.RoleAppService",
    "Method": "GetRolesAsync",
    "RelativePath": "api/services/app/Role/GetRoles",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Permission",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.ListResultDto\u00601[[Mofleet.Roles.Dto.RoleListDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Roles.RoleAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/Role/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Roles.Dto.RoleDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Roles.Dto.RoleDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.ServiceAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Service/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.services.Dto.CreateServiceDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.services.Dto.ServiceDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.ServiceAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Service/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.ServiceAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Service/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.services.Dto.ServiceDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.ServiceAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Service/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "KeyWord",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "SubServiceId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "ToolId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "IsForStorage",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "IsForTruck",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "Active",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.services.Dto.LiteServiceDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.ServiceAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/Service/SwitchActivation",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Cities.Dto.SwitchActivationInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Cities.Dto.OutPutBooleanStatuesDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.ServiceAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/Service/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.services.Dto.UpdateServiceDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.services.Dto.ServiceDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Sessions.SessionAppService",
    "Method": "GetCurrentLoginInformations",
    "RelativePath": "api/services/app/Session/GetCurrentLoginInformations",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Sessions.Dto.GetCurrentLoginInformationsOutput",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.SmsSender.SmsSenderAppService",
    "Method": "SendOTPVerificationSMS",
    "RelativePath": "api/services/app/SmsSender/SendOTPVerificationSMS",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "to",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "channel",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "Mofleet.SmsSender.SmsSenderAppService",
    "Method": "VerificationCheckOTP",
    "RelativePath": "api/services/app/SmsSender/VerificationCheckOTP",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "code",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "to",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": []
  },
  {
    "ContainingType": "Mofleet.SourceTypes.SourceTypeAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/SourceType/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.SourceTypes.Dto.CreateSourceTypeDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.SourceTypes.Dto.SourceTypeDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.SourceTypes.SourceTypeAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/SourceType/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.SourceTypes.SourceTypeAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/SourceType/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.SourceTypes.Dto.SourceTypeDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.SourceTypes.SourceTypeAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/SourceType/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.SourceTypes.Dto.LiteSourceTypeDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.SourceTypes.SourceTypeAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/SourceType/SwitchActivation",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Cities.Dto.SwitchActivationInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.SourceTypes.Dto.SourceTypeDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.SourceTypes.SourceTypeAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/SourceType/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.SourceTypes.Dto.UpdateSourceTypeDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.SourceTypes.Dto.SourceTypeDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.RequestForQuotations.RequestForQuotationAppService",
    "Method": "GetStatisticsNumbers",
    "RelativePath": "api/services/app/Statictics/GetStatisticsNumbers",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.RequestForQuotations.Dto.GeneralStatisticsNumbersDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.SubServiceAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/SubService/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.SubServices.Dto.CreateSubServiceDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.SubServices.Dto.SubServiceDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.SubServiceAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/SubService/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.SubServiceAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/SubService/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.SubServices.Dto.SubServiceDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.SubServiceAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/SubService/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "KeyWord",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "ServiceId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "ToolId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.SubServices.Dto.LiteSubServiceDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.SubServiceAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/SubService/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.SubServices.Dto.UpdateSubServiceDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.SubServices.Dto.SubServiceDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.MultiTenancy.TenantAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Tenant/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.MultiTenancy.Dto.CreateTenantDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.MultiTenancy.Dto.TenantDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.MultiTenancy.TenantAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Tenant/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Abp.Application.Services.AsyncCrudAppService\u00608[[Mofleet.MultiTenancy.Tenant, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.MultiTenancy.Dto.TenantDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Mofleet.MultiTenancy.Dto.PagedTenantResultRequestDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.MultiTenancy.Dto.CreateTenantDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.MultiTenancy.Dto.TenantDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Abp.Application.Services.Dto.EntityDto\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Abp, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null],[Abp.Application.Services.Dto.EntityDto\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Abp, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Tenant/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.MultiTenancy.Dto.TenantDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Abp.Application.Services.AsyncCrudAppService\u00608[[Mofleet.MultiTenancy.Tenant, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.MultiTenancy.Dto.TenantDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Mofleet.MultiTenancy.Dto.PagedTenantResultRequestDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.MultiTenancy.Dto.CreateTenantDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.MultiTenancy.Dto.TenantDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Abp.Application.Services.Dto.EntityDto\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Abp, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null],[Abp.Application.Services.Dto.EntityDto\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Abp, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Tenant/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.MultiTenancy.Dto.TenantDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Abp.Application.Services.AsyncCrudAppService\u00608[[Mofleet.MultiTenancy.Tenant, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.MultiTenancy.Dto.TenantDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Mofleet.MultiTenancy.Dto.PagedTenantResultRequestDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.MultiTenancy.Dto.CreateTenantDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.MultiTenancy.Dto.TenantDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Abp.Application.Services.Dto.EntityDto\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Abp, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null],[Abp.Application.Services.Dto.EntityDto\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Abp, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/Tenant/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.MultiTenancy.Dto.TenantDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.MultiTenancy.Dto.TenantDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.TermService.TermAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Term/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.TermService.Dto.CreateTermDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.TermService.Dto.TermDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.TermService.TermAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Term/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.TermService.TermAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Term/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.TermService.Dto.TermDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.TermService.TermAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Term/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "App",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BAppType, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.TermService.Dto.LiteTermDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.TermService.TermAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/Term/SwitchActivation",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Cities.Dto.SwitchActivationInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.TermService.Dto.TermDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.TermService.TermAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/Term/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.TermService.Dto.UpdateTermDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.TermService.Dto.TermDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.ToolAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/Tool/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Toolss.Dto.CreateToolDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Toolss.Dto.ToolDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.ToolAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/Tool/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.ToolAppService",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/Tool/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Toolss.Dto.ToolDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.ToolAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/Tool/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "ServiceId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SubServiceId",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Domain.Toolss.Dto.LiteToolDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.ToolAppService",
    "Method": "SwitchActivationAsync",
    "RelativePath": "api/services/app/Tool/SwitchActivation",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Cities.Dto.SwitchActivationInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Toolss.Dto.ToolDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.AttributesForSourceType.ToolAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/Tool/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Domain.Toolss.Dto.UpdateToolDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Domain.Toolss.Dto.ToolDetailsDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "Activate",
    "RelativePath": "api/services/app/User/Activate",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "user",
        "Type": "Abp.Application.Services.Dto.EntityDto\u00601[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "AskForHelp",
    "RelativePath": "api/services/app/User/AskForHelp",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "message",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "ChangeLanguage",
    "RelativePath": "api/services/app/User/ChangeLanguage",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Users.Dto.ChangeUserLanguageDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "ChangePassword",
    "RelativePath": "api/services/app/User/ChangePassword",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Users.Dto.ChangePasswordDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "CheckIfUserIsBroker",
    "RelativePath": "api/services/app/User/CheckIfUserIsBroker",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Users.Dto.CheckIsBrokerDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "CheckIfUserOwnesPinByPhoneNumber",
    "RelativePath": "api/services/app/User/CheckIfUserOwnesPinByPhoneNumber",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Users.Dto.ComparePinPhoneNumberDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Users.Dto.ResuktComparePinPhoneNumberDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "ConfirmFollowedForAskingForHelp",
    "RelativePath": "api/services/app/User/ConfirmFollowedForAskingForHelp",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "id",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "CreateAsync",
    "RelativePath": "api/services/app/User/Create",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Users.Dto.CreateUserDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Users.Dto.UserDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "DeActivate",
    "RelativePath": "api/services/app/User/DeActivate",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "user",
        "Type": "Abp.Application.Services.Dto.EntityDto\u00601[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "DeleteAsync",
    "RelativePath": "api/services/app/User/Delete",
    "HttpMethod": "DELETE",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Id",
        "Type": "System.Int64",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Abp.Application.Services.AsyncCrudAppService\u00608[[Mofleet.Authorization.Users.User, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Users.Dto.UserDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Mofleet.Users.Dto.PagedUserResultRequestDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Users.Dto.CreateUserDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Users.Dto.UpdateUserDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Mofleet.Users.Dto.UserDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[Abp.Application.Services.Dto.EntityDto\u00601[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Abp, Version=8.4.0.0, Culture=neutral, PublicKeyToken=null]]",
    "Method": "GetAsync",
    "RelativePath": "api/services/app/User/Get",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "UserName",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "Name",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "Surname",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "EmailAddress",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "FullName",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "LastLoginTime",
        "Type": "System.Nullable\u00601[[System.DateTime, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "CreationTime",
        "Type": "System.DateTime",
        "IsRequired": false
      },
      {
        "Name": "Type",
        "Type": "Mofleet.Enums.Enum\u002BUserType",
        "IsRequired": false
      },
      {
        "Name": "PIN",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "RoleNames",
        "Type": "System.String[]",
        "IsRequired": false
      },
      {
        "Name": "RegistrationFullName",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "Id",
        "Type": "System.Int64",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Users.Dto.UserDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "GetAllAsync",
    "RelativePath": "api/services/app/User/GetAll",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Keyword",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "IsActive",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "UserType",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BUserType, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      },
      {
        "Name": "GetAdminsAndCustomerServices",
        "Type": "System.Nullable\u00601[[System.Boolean, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      },
      {
        "Name": "GetBasicUserAndCompanyUsers",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "GetBasicUserAndBrokerUsers",
        "Type": "System.Boolean",
        "IsRequired": false
      },
      {
        "Name": "MediatorCode",
        "Type": "System.String",
        "IsRequired": false
      },
      {
        "Name": "SkipCount",
        "Type": "System.Int32",
        "IsRequired": false
      },
      {
        "Name": "MaxResultCount",
        "Type": "System.Int32",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.PagedResultDto\u00601[[Mofleet.Users.Dto.UserDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "GetAllAskForHelps",
    "RelativePath": "api/services/app/User/GetAllAskForHelps",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Statues",
        "Type": "System.Nullable\u00601[[Mofleet.Enums.Enum\u002BAskForHelpStatues, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.IList\u00601[[Mofleet.Domain.AskForHelps.Dto.LiteAskForHelpDto, Mofleet.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "GetCurrentFcmTokenAsync",
    "RelativePath": "api/services/app/User/GetCurrentFcmToken",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.String",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "GetRoles",
    "RelativePath": "api/services/app/User/GetRoles",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "Abp.Application.Services.Dto.ListResultDto\u00601[[Mofleet.Roles.Dto.RoleDto, Mofleet.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "GetStatisticalNumbers",
    "RelativePath": "api/services/app/User/GetStatisticalNumbers",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "Year",
        "Type": "System.Nullable\u00601[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Users.Dto.UsersStatisticalNumbersDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "ResetPassword",
    "RelativePath": "api/services/app/User/ResetPassword",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Users.Dto.ResetPasswordDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "SetCurrentFcmTokenAsync",
    "RelativePath": "api/services/app/User/SetCurrentFcmToken",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "SetRolesForAllUsers",
    "RelativePath": "api/services/app/User/SetRolesForAllUsers",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "user",
        "Type": "Mofleet.Enums.Enum\u002BUserType",
        "IsRequired": true
      },
      {
        "Name": "roleName",
        "Type": "System.String",
        "IsRequired": false
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Void",
        "MediaTypes": [],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Users.UserAppService",
    "Method": "UpdateAsync",
    "RelativePath": "api/services/app/User/Update",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Users.Dto.UpdateUserDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Users.Dto.UserDto",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Controllers.TokenAuthController",
    "Method": "Authenticate",
    "RelativePath": "api/TokenAuth/Authenticate",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "model",
        "Type": "Mofleet.Models.TokenAuth.AuthenticateModel",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Models.TokenAuth.AuthenticateResultModel",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Controllers.TokenAuthController",
    "Method": "CreateAccountAfterSignUpAsync",
    "RelativePath": "api/TokenAuth/CreateAccountAfterSignUp",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Models.TokenAuth.VerifySignUpByPhoneNumberInput",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Models.TokenAuth.VerifyLoginByPhoneNumberOutput",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Controllers.TokenAuthController",
    "Method": "ExternalAuthenticate",
    "RelativePath": "api/TokenAuth/ExternalAuthenticate",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "model",
        "Type": "Mofleet.Models.TokenAuth.ExternalAuthenticateModel",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Models.TokenAuth.ExternalAuthenticateResultModel",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Controllers.TokenAuthController",
    "Method": "GetExternalAuthenticationProviders",
    "RelativePath": "api/TokenAuth/GetExternalAuthenticationProviders",
    "HttpMethod": "GET",
    "IsController": true,
    "Order": 0,
    "Parameters": [],
    "ReturnTypes": [
      {
        "Type": "System.Collections.Generic.List\u00601[[Mofleet.Models.TokenAuth.ExternalLoginProviderInfoModel, Mofleet.Web.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Controllers.TokenAuthController",
    "Method": "VerifyChangePhoneNumberAsync",
    "RelativePath": "api/TokenAuth/VerifyChangePhoneNumber",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Models.TokenAuth.VerifyChangePhoneNumberInput",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Controllers.TokenAuthController",
    "Method": "VerifySignInWithPhoneNumberAsync",
    "RelativePath": "api/TokenAuth/VerifySignInWithPhoneNumber",
    "HttpMethod": "POST",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Models.TokenAuth.VerifyLoginByPhoneNumberInput",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "Mofleet.Models.TokenAuth.AuthenticateResultModel",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Controllers.TokenAuthController",
    "Method": "VerifyUserToSetNewPassword",
    "RelativePath": "api/TokenAuth/VerifyUserToSetNewPassword",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Models.TokenAuth.VerifyResetPasswordForUserInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  },
  {
    "ContainingType": "Mofleet.Controllers.TokenAuthController",
    "Method": "VerifyUserToSetNewPasswordByEmail",
    "RelativePath": "api/TokenAuth/VerifyUserToSetNewPasswordByEmail",
    "HttpMethod": "PUT",
    "IsController": true,
    "Order": 0,
    "Parameters": [
      {
        "Name": "input",
        "Type": "Mofleet.Models.TokenAuth.VerifyResetPasswordForUserUsingEmailInputDto",
        "IsRequired": true
      }
    ],
    "ReturnTypes": [
      {
        "Type": "System.Boolean",
        "MediaTypes": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "StatusCode": 200
      }
    ]
  }
]